<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>i01ortal</title>
  
  <subtitle>My Conquest Is the Sea of Stars</subtitle>
  <link href="http://i01ortal.tk/atom.xml" rel="self"/>
  
  <link href="http://i01ortal.tk/"/>
  <updated>2022-09-06T08:07:21.060Z</updated>
  <id>http://i01ortal.tk/</id>
  
  <author>
    <name>i01ortal</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>某站点Sign值逆向</title>
    <link href="http://i01ortal.tk/2022/09/06/%E6%9F%90%E7%AB%99%E7%82%B9Sign%E5%80%BC%E9%80%86%E5%90%91/"/>
    <id>http://i01ortal.tk/2022/09/06/%E6%9F%90%E7%AB%99%E7%82%B9Sign%E5%80%BC%E9%80%86%E5%90%91/</id>
    <published>2022-09-06T06:26:17.000Z</published>
    <updated>2022-09-06T08:07:21.060Z</updated>
    
    <content type="html"><![CDATA[<h1 id="某站点SIgn值逆向"><a href="#某站点SIgn值逆向" class="headerlink" title="某站点SIgn值逆向"></a>某站点SIgn值逆向</h1><p>Autor：I01ORTAL</p><p>Time：2022-09-05</p><p>随着网络安全的发展，如何保护API接口的数据安全性成了一个很重要的问题：</p><ul><li><p>某站点SIgn值逆向</p><p>Autor：I01ORTAL</p><p>Time：2022-09-05</p><p>随着网络安全的发展，如何保护API接口的数据安全性成了一个很重要的问题：</p><ul><li>请求身份来源是否合法？</li><li>请求参数是否被篡改？</li><li>请求的唯一性</li></ul><p>面临以上一些问题，Sign（签名）也被设计出来保护API接口数据的安全。更多应用厂商也开始意识到，很多应用系统已经开始采用验证签名的方法来保护，防止一些攻击，如 Replay attack （重放攻击），Data tampering（数据篡改）。</p><p>但是加上Sign并不是说其它漏洞或者安全问题就不存在，还是需要我们进行渗透测试，验证系统是否安全，有防自然有攻，还是那句话，没有绝对安全的系统。</p><span id="more"></span><p>在应用系统加上签名后，进行Web端渗透测试时就面临了一些麻烦，不能重放，修改请求数据，使用 Sign 值的应用系统确实提高了一定的安全性，但是还是存在很大的安全隐患。 Sign 值在生成的过程中是在Web前端完成的，Web前端代码对我们可见，虽说大多数进行过混淆，但是只要去找，一定可以将应用系统 Sign 值生成方式逆向出来。</p><h2 id="抓包分析"><a href="#抓包分析" class="headerlink" title="抓包分析"></a>抓包分析</h2><p>以下是对某个站点Sign值的逆向过程，如有错误请各位指正。</p><p>打开应用系统尝试抓包测试，发现应用系统使用Sign来验证接口安全，修改参数则提示签名校验失败。</p><p><img src="https://github.com/i01ortal/Images/tree/main/imgback/202209061432097.png" alt="image-20220905125804706"></p><p>简单观察一下Header头，Customized-Field 和 Sign 是重点</p><p><img src="https://github.com/i01ortal/Images/tree/main/imgback/202209061417449.png" alt="image-20220905125551126"></p><h3 id="Customized-Field-和-Sign-分析"><a href="#Customized-Field-和-Sign-分析" class="headerlink" title="Customized-Field 和 Sign 分析"></a>Customized-Field 和 Sign 分析</h3><p>Customized-Field 头由三个值组成:</p><ul><li>api    请求接口URL</li><li>client-type     字面意思为连接的类型</li><li>timestamp    时间戳（timestamp）是指格林威治时间1970年01月01日00时00分00秒起至现在的总秒数。</li></ul><p>Sign 头：</p><ul><li>长度为64位数字加大写字母组合</li></ul><p>根据了解的一些加密算法特征，猜测为SHA256加密算法。</p><p>参考常见的一些加密编码类型的密文特征：</p><p><a href="https://cloud.tencent.com/developer/article/1748394">https://cloud.tencent.com/developer/article/1748394</a></p><h2 id="前端代码分析"><a href="#前端代码分析" class="headerlink" title="前端代码分析"></a>前端代码分析</h2><p>通过简单的对请求进行分析，找到了一些关键点，现在我们在控制台中去查找一下这些关键字：</p><h3 id="Sign值"><a href="#Sign值" class="headerlink" title="Sign值"></a>Sign值</h3><p><strong>F12</strong> 打开控制台，找到调试器，CTRL + F 查找Sign值（PS-1）：</p><blockquote><p>PS-1：JS逆向定位技巧有很多，这里采用全局搜索关键字来进行定位，介绍几个常用的</p><ul><li>全局搜索关键字，如 sign , password=,  .post , .get</li><li>Dom元素事件监听</li><li>xhr断点</li><li>Initator栈追踪</li></ul></blockquote><p><img src="https://github.com/i01ortal/Images/tree/main/imgback/202209061432701.png" alt="image-20220905134938501"></p><p>经过全局查找（PS-2），可以看到四个比较可能是Sign值生成的位置。</p><blockquote><p>PS-2：目标系统使用VUE前端框架，在生成JS文件时一般如**_app.js**形式的文件是主要入口文件，所以在逆向查找时从该文件进入</p></blockquote><h4 id="先看-this-headers-sign-进入该行代码查看："><a href="#先看-this-headers-sign-进入该行代码查看：" class="headerlink" title="先看 this.headers.sign, 进入该行代码查看："></a>先看 <strong>this.headers.sign</strong>, 进入该行代码查看：</h4><p><img src="https://github.com/i01ortal/Images/tree/main/imgback/202209061418873.png" alt="image-20220905141256503"></p><p>该位置为某些接口的验证</p><h4 id="进入-sign-Object-c-b-l-n-a"><a href="#进入-sign-Object-c-b-l-n-a" class="headerlink" title="进入 sign: Object(c.b) (l, n, a)"></a>进入 <strong>sign: Object(c.b) (l, n, a)</strong></h4><p><img src="https://github.com/i01ortal/Images/tree/main/imgback/202209061418620.png" alt="image-20220905142659988"></p><p><img src="https://github.com/i01ortal/Images/tree/main/imgback/202209061418300.png" alt="image-20220905142821375"></p><p>简单查看可以确认是生成Sign值和Customized-Field的位置，在这行打断点开始调试：</p><p><img src="https://github.com/i01ortal/Images/tree/main/imgback/202209061418705.png" alt="image-20220905144211939"></p><p>打上断点后刷新网站，运行到断点处停止，在控制台打印 <strong>sign: Object(c.b) (l, n, a)</strong> 各个参数看看：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">l</span><br><span class="line"><span class="string">&quot;&#123;\&quot;api\&quot;:\&quot;/message/queryMessage\&quot;,\&quot;client-type\&quot;:\&quot;web\&quot;,\&quot;timestamp\&quot;:\&quot;1662359962053\&quot;&#125;&quot;</span></span><br><span class="line">c.b</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">p</span>(<span class="params">e, t, n</span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">a</span></span></span><br><span class="line"><span class="function"><span class="title">Object</span> </span>&#123;  &#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>l</strong> 为Customized-Field值</p></li><li><p>c.b 为 function p</p></li><li><p>a 为空</p></li></ul><h4 id="继续跟进-function-p-e-t-n"><a href="#继续跟进-function-p-e-t-n" class="headerlink" title="继续跟进 function p(e, t, n)"></a>继续跟进 <strong>function p(e, t, n)</strong></h4><p><img src="https://github.com/i01ortal/Images/tree/main/imgback/202209061432520.png" alt="image-20220905150025784"></p><p>运气很好，跟进进来直接看到我们需要的东西</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">p = <span class="function"><span class="keyword">function</span> (<span class="params">e, t, n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> r = <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  o = d(s(&#123;</span><br><span class="line">  &#125;, n, &#123;</span><br><span class="line">    <span class="string">&#x27;Customized-Field&#x27;</span>: e</span><br><span class="line">  &#125;));</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> c <span class="keyword">in</span> o) &#123;</span><br><span class="line">    <span class="keyword">var</span> l = o[c] || <span class="number">0</span> === o[c] ? <span class="string">&#x27;object&#x27;</span> === a(o[c]) ? <span class="built_in">JSON</span>.stringify(o[c]) : o[c] : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="number">0</span> === l || l ? r += <span class="string">&#x27;&#x27;</span>.concat(c, <span class="string">&#x27;=&#x27;</span>).concat(l, <span class="string">&#x27;&amp;&#x27;</span>) : <span class="keyword">delete</span> n[c]</span><br><span class="line">  &#125;</span><br><span class="line">  r += <span class="string">&#x27;key=&#x27;</span>.concat(u);</span><br><span class="line">  <span class="keyword">var</span> f = i.a.HmacSHA256(r, u);</span><br><span class="line">  <span class="keyword">return</span> i.a.enc.Hex.stringify(f).toUpperCase()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在可以确认加密编码方式为 <strong>Hmac-SHA256</strong> </p><p>有部分看不懂部的代码，打印一下输出。</p><p><strong>i.a.enc</strong></p><p><img src="https://github.com/i01ortal/Images/tree/main/imgback/202209061418868.png" alt="image-20220905152050050"></p><p>现在知道是什么意思了，代表调用的加密方法，其它情况也可以这样去判断，对不了解的函数直接谷歌查找一下就OK。</p><h4 id="继续跟进-funtion-p"><a href="#继续跟进-funtion-p" class="headerlink" title="继续跟进 funtion p"></a>继续跟进 <strong>funtion p</strong></h4><p><img src="https://github.com/i01ortal/Images/tree/main/imgback/202209061432727.png" alt="image-20220905154758475"></p><h4 id="跟进函数-d"><a href="#跟进函数-d" class="headerlink" title="跟进函数 d()"></a>跟进函数 <strong>d()</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="built_in">Object</span>.keys(e).sort(), n = &#123;</span><br><span class="line">      &#125;, r = <span class="number">0</span>; r &lt; t.length; r++) n[t[r]] = e[t[r]];</span><br><span class="line">      <span class="keyword">return</span> n</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong><code>Object.keys()</code></strong> 方法会返回一个由一个给定对象的自身可枚举属性组成的数组，数组中属性名的排列顺序和正常循环遍历该对象时返回的顺序一致。</p></blockquote><blockquote><p>默认情况下，<code>sort()</code> 方法将按字母和升序将值作为字符串进行排序。</p></blockquote><p>对 e 进行了排序处理，按照数组首字母进行升序排序。</p><h4 id="继续跟进-s"><a href="#继续跟进-s" class="headerlink" title="继续跟进 s"></a>继续跟进 <strong>s</strong></h4><p><img src="https://github.com/i01ortal/Images/tree/main/imgback/202209061419460.png" alt="image-20220905160039509"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="number">1</span>; t &lt; <span class="built_in">arguments</span>.length; t++) &#123;</span><br><span class="line">    <span class="keyword">var</span> n = <span class="literal">null</span> != <span class="built_in">arguments</span>[t] ? <span class="built_in">arguments</span>[t] : &#123;</span><br><span class="line">    &#125;;</span><br><span class="line">    t % <span class="number">2</span> ? o(<span class="built_in">Object</span>(n), !<span class="number">0</span>).forEach((<span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">      c(e, t, n[t])</span><br><span class="line">    &#125;)) : <span class="built_in">Object</span>.getOwnPropertyDescriptors ? <span class="built_in">Object</span>.defineProperties(e, <span class="built_in">Object</span>.getOwnPropertyDescriptors(n)) : o(<span class="built_in">Object</span>(n)).forEach((<span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">Object</span>.defineProperty(e, t, <span class="built_in">Object</span>.getOwnPropertyDescriptor(n, t))</span><br><span class="line">    &#125;))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> e</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>**<code>forEach() </code>**方法用于调用数组的每个元素，并将元素传递给回调函数。注意:forEach() 对于空数组是不会执行回调函数的。</p></blockquote><blockquote><p><strong><code>Object.getOwnPropertyDescriptors()</code></strong> 方法用来获取一个对象的所有自身属性的描述符。</p></blockquote><p>还是不太能看懂要干什么，继续跟进看输出</p><p><img src="https://github.com/i01ortal/Images/tree/main/imgback/202209061419484.png" alt="image-20220905161207683"></p><p>虽然具体不理解 <strong>s()</strong> 要干什么，但是知道 **s()**是什么也行。大致对 <strong>e</strong> 进行处理，可以看到 <strong>e</strong> 是 参数 Customized-Field 。</p><p><img src="https://github.com/i01ortal/Images/tree/main/imgback/202209061419880.png" alt="image-20220905162148287"></p><p>那么 <strong>o = d(s({}, n, {‘Customized-Field’: e}))</strong> ，就是进行了数组排序处理。</p><h4 id="继续更进："><a href="#继续更进：" class="headerlink" title="继续更进："></a>继续更进：</h4><p><img src="https://github.com/i01ortal/Images/tree/main/imgback/202209061419134.png" alt="image-20220905163357004"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> c <span class="keyword">in</span> o) &#123;</span><br><span class="line">  <span class="keyword">var</span> l = o[c] || <span class="number">0</span> === o[c] ? <span class="string">&#x27;object&#x27;</span> === a(o[c]) ? <span class="built_in">JSON</span>.stringify(o[c]) : o[c] : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="number">0</span> === l || l ? r += <span class="string">&#x27;&#x27;</span>.concat(c, <span class="string">&#x27;=&#x27;</span>).concat(l, <span class="string">&#x27;&amp;&#x27;</span>) : <span class="keyword">delete</span> n[c]</span><br><span class="line">&#125;</span><br><span class="line">r += <span class="string">&#x27;key=&#x27;</span>.concat(u);</span><br></pre></td></tr></table></figure><blockquote><p>PS-3: 以上调试时未在请求中post数据</p></blockquote><p>再请求中带上POST数据后</p><p><img src="https://github.com/i01ortal/Images/tree/main/imgback/202209061419988.png" alt="image-20220905165046078"></p><p>对排序过后的 <strong>o</strong> 进行重组，重组格式大致如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;Customized-Field=&#123;\&quot;api\&quot;:\&quot;/user/institutionListByAccount\&quot;,\&quot;client-type\&quot;:\&quot;web\&quot;,\&quot;timestamp\&quot;:\&quot;1662367339537\&quot;&#125;&amp;account=admin&amp;key=JQGyyyXXXXXCA9WPEx72jXXXXXXUNpEK1FL6B&quot;</span> </span><br></pre></td></tr></table></figure><p><strong>Customized-Field + = + {排序后api, client-type, timestamp} + &amp; 参数（字母顺序升序排序）+ &amp; + 参数值 + &amp; + key值（不参与排序）</strong></p><h4 id="继续跟进，Sign值生成"><a href="#继续跟进，Sign值生成" class="headerlink" title="继续跟进，Sign值生成"></a>继续跟进，Sign值生成</h4><p><img src="https://github.com/i01ortal/Images/tree/main/imgback/202209061419773.png" alt="image-20220905165601894"></p><p>到这不用关注加密是怎么执行，步出得到结果就行，控制台执行 <strong>i.a.enc.Hex.stringify(f).toUpperCase()</strong></p><p><img src="https://github.com/i01ortal/Images/tree/main/imgback/202209061420545.png" alt="image-20220905170329384"></p><p>好了，现在已经得到Sign值的加密以及生成方法了。整个流程大致如下：</p><p><img src="https://github.com/i01ortal/Images/tree/main/imgback/202209061420758.png" alt="image-20220905172658183"></p><p>整个分析过程也比较简单，第一步便找到入口点，那后面的只需要时间就能解决了。下面使用python来实现一下加密代码：</p><h3 id="Python代码实现："><a href="#Python代码实现：" class="headerlink" title="Python代码实现："></a>Python代码实现：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> operator</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">timestamp = <span class="built_in">str</span>(time.time()*<span class="number">1000</span>)[<span class="number">0</span>:-<span class="number">4</span>][<span class="number">0</span>:-<span class="number">1</span>] <span class="comment"># 返回当前时间的时间戳（1970纪元后经过的浮点秒数）。</span></span><br><span class="line">key = <span class="string">&quot;JQGyyy1dP2ku1XXXXXXXXX2S3UIf1n0uUNpEK1FL6B&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    url = <span class="string">r&#x27;/file/download?fileName=&amp;type=1&#x27;</span> <span class="comment"># GET 参数</span></span><br><span class="line">    data = <span class="string">&quot;&quot;&quot;&#123;&quot;taskId&quot;:2,&quot;pageNum&quot;:1,&quot;pageSize&quot;:10&#125;&quot;&quot;&quot;</span> <span class="comment"># POST参数</span></span><br><span class="line">    datan = <span class="built_in">dict</span>(<span class="built_in">sorted</span>(json.loads(data).items(), key=operator.itemgetter(<span class="number">0</span>))) <span class="comment"># POST参数str型使用json处理，按照首字母顺序进行重排列</span></span><br><span class="line">    post_datam = <span class="built_in">str</span>(datan).replace(<span class="string">&#x27;&quot;&#x27;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&#x27;:&#x27;</span>,<span class="string">&#x27;=&#x27;</span>).replace(<span class="string">&quot;,&quot;</span>,<span class="string">&quot;&amp;&quot;</span>).replace(<span class="string">&quot;&#123;&quot;</span>,<span class="string">&quot;&amp;&quot;</span>).replace(<span class="string">&quot;&#125;&quot;</span>,<span class="string">&quot;&amp;&quot;</span>).replace(<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    get_params = <span class="string">&quot;&amp;&quot;</span> + url.split(<span class="string">&quot;?&quot;</span>)[<span class="number">1</span>] + <span class="string">&quot;&amp;&quot;</span></span><br><span class="line">    signdata = <span class="string">&#x27;Customized-Field=&#123;&#x27;</span> + <span class="string">&#x27;&quot;api&quot;:&quot;&#123;&#125;&quot;,&quot;client-type&quot;:&quot;web&quot;&#x27;</span>.<span class="built_in">format</span>(url) + <span class="string">&quot;,&quot;</span> + <span class="string">&#x27;&quot;timestamp&quot;:&quot;&#123;&#125;&quot;&#x27;</span>.<span class="built_in">format</span>(timestamp) + <span class="string">&quot;&#125;&quot;</span> + <span class="string">&#x27;&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(params) + <span class="string">&quot;key=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(key)</span><br><span class="line">    sign = hmac.new(<span class="built_in">bytes</span>(key, encoding=<span class="string">&#x27;UTF-8&#x27;</span>), <span class="built_in">bytes</span>(signdata, encoding=<span class="string">&#x27;UTF-8&#x27;</span>), digestmod=sha256).hexdigest() <span class="comment"># hmac-sha256加密</span></span><br><span class="line">    <span class="built_in">print</span>(timestamp)</span><br><span class="line">    <span class="comment"># print(signdata)</span></span><br><span class="line">    <span class="built_in">print</span>(sign.upper())</span><br></pre></td></tr></table></figure><p><img src="https://github.com/i01ortal/Images/tree/main/imgback/202209061420682.png" alt="image-20220905173351783"></p><blockquote><p>PS-4: 代码写的跟屎一样，各位师傅勿视。</p></blockquote><p>目前第一版代码如上，后续会配合@f0ng师傅写的 项目<strong>autoDecoder</strong> 结合在BurpSuite中实现自动更新Sign值和Customized-Field。</p><p>项目地址：<a href="https://github.com/f0ng/autoDecoder">https://github.com/f0ng/autoDecoder</a></p><p>参考：</p><p><a href="https://juejin.cn/post/7037704683468619807">https://juejin.cn/post/7037704683468619807</a></p></li><li><p>请求身份来源是否合法？</p></li><li><p>请求参数是否被篡改？</p></li><li><p>请求的唯一性</p></li></ul><p>面临以上一些问题，Sign（签名）也被设计出来保护API接口数据的安全。更多应用厂商也开始意识到，很多应用系统已经开始采用验证签名的方法来保护，防止一些攻击，如 Replay attack （重放攻击），Data tampering（数据篡改）。</p><p>但是加上Sign并不是说其它漏洞或者安全问题就不存在，还是需要我们进行渗透测试，验证系统是否安全，有防自然有攻，还是那句话，没有绝对安全的系统。</p><!-- more --><p>在应用系统加上签名后，进行Web端渗透测试时就面临了一些麻烦，不能重放，修改请求数据，使用 Sign 值的应用系统确实提高了一定的安全性，但是还是存在很大的安全隐患。 Sign 值在生成的过程中是在Web前端完成的，Web前端代码对我们可见，虽说大多数进行过混淆，但是只要去找，一定可以将应用系统 Sign 值生成方式逆向出来。</p><h2 id="抓包分析-1"><a href="#抓包分析-1" class="headerlink" title="抓包分析"></a>抓包分析</h2><p>以下是对某个站点Sign值的逆向过程，如有错误请各位指正。</p><p>打开应用系统尝试抓包测试，发现应用系统使用Sign来验证接口安全，修改参数则提示签名校验失败。</p><p><img src="https://github.com/i01ortal/Images/tree/main/imgback/202209061432097.png" alt="image-20220905125804706"></p><p>简单观察一下Header头，Customized-Field 和 Sign 是重点</p><p><img src="https://github.com/i01ortal/Images/tree/main/imgback/202209061417449.png" alt="image-20220905125551126"></p><h3 id="Customized-Field-和-Sign-分析-1"><a href="#Customized-Field-和-Sign-分析-1" class="headerlink" title="Customized-Field 和 Sign 分析"></a>Customized-Field 和 Sign 分析</h3><p>Customized-Field 头由三个值组成:</p><ul><li>api    请求接口URL</li><li>client-type     字面意思为连接的类型</li><li>timestamp    时间戳（timestamp）是指格林威治时间1970年01月01日00时00分00秒起至现在的总秒数。</li></ul><p>Sign 头：</p><ul><li>长度为64位数字加大写字母组合</li></ul><p>根据了解的一些加密算法特征，猜测为SHA256加密算法。</p><p>参考常见的一些加密编码类型的密文特征：</p><p><a href="https://cloud.tencent.com/developer/article/1748394">https://cloud.tencent.com/developer/article/1748394</a></p><h2 id="前端代码分析-1"><a href="#前端代码分析-1" class="headerlink" title="前端代码分析"></a>前端代码分析</h2><p>通过简单的对请求进行分析，找到了一些关键点，现在我们在控制台中去查找一下这些关键字：</p><h3 id="Sign值-1"><a href="#Sign值-1" class="headerlink" title="Sign值"></a>Sign值</h3><p><strong>F12</strong> 打开控制台，找到调试器，CTRL + F 查找Sign值（PS-1）：</p><blockquote><p>PS-1：JS逆向定位技巧有很多，这里采用全局搜索关键字来进行定位，介绍几个常用的</p><ul><li>全局搜索关键字，如 sign , password=,  .post , .get</li><li>Dom元素事件监听</li><li>xhr断点</li><li>Initator栈追踪</li></ul></blockquote><p><img src="https://github.com/i01ortal/Images/tree/main/imgback/202209061432701.png" alt="image-20220905134938501"></p><p>经过全局查找（PS-2），可以看到四个比较可能是Sign值生成的位置。</p><blockquote><p>PS-2：目标系统使用VUE前端框架，在生成JS文件时一般如**_app.js**形式的文件是主要入口文件，所以在逆向查找时从该文件进入</p></blockquote><h4 id="先看-this-headers-sign-进入该行代码查看：-1"><a href="#先看-this-headers-sign-进入该行代码查看：-1" class="headerlink" title="先看 this.headers.sign, 进入该行代码查看："></a>先看 <strong>this.headers.sign</strong>, 进入该行代码查看：</h4><p><img src="https://github.com/i01ortal/Images/tree/main/imgback/202209061418873.png" alt="image-20220905141256503"></p><p>该位置为某些接口的验证</p><h4 id="进入-sign-Object-c-b-l-n-a-1"><a href="#进入-sign-Object-c-b-l-n-a-1" class="headerlink" title="进入 sign: Object(c.b) (l, n, a)"></a>进入 <strong>sign: Object(c.b) (l, n, a)</strong></h4><p><img src="https://github.com/i01ortal/Images/tree/main/imgback/202209061418620.png" alt="image-20220905142659988"></p><p><img src="https://github.com/i01ortal/Images/tree/main/imgback/202209061418300.png" alt="image-20220905142821375"></p><p>简单查看可以确认是生成Sign值和Customized-Field的位置，在这行打断点开始调试：</p><p><img src="https://github.com/i01ortal/Images/tree/main/imgback/202209061418705.png" alt="image-20220905144211939"></p><p>打上断点后刷新网站，运行到断点处停止，在控制台打印 <strong>sign: Object(c.b) (l, n, a)</strong> 各个参数看看：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">l</span><br><span class="line"><span class="string">&quot;&#123;\&quot;api\&quot;:\&quot;/message/queryMessage\&quot;,\&quot;client-type\&quot;:\&quot;web\&quot;,\&quot;timestamp\&quot;:\&quot;1662359962053\&quot;&#125;&quot;</span></span><br><span class="line">c.b</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">p</span>(<span class="params">e, t, n</span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">a</span></span></span><br><span class="line"><span class="function"><span class="title">Object</span> </span>&#123;  &#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>l</strong> 为Customized-Field值</p></li><li><p>c.b 为 function p</p></li><li><p>a 为空</p></li></ul><h4 id="继续跟进-function-p-e-t-n-1"><a href="#继续跟进-function-p-e-t-n-1" class="headerlink" title="继续跟进 function p(e, t, n)"></a>继续跟进 <strong>function p(e, t, n)</strong></h4><p><img src="https://github.com/i01ortal/Images/tree/main/imgback/202209061432520.png" alt="image-20220905150025784"></p><p>运气很好，跟进进来直接看到我们需要的东西</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">p = <span class="function"><span class="keyword">function</span> (<span class="params">e, t, n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> r = <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  o = d(s(&#123;</span><br><span class="line">  &#125;, n, &#123;</span><br><span class="line">    <span class="string">&#x27;Customized-Field&#x27;</span>: e</span><br><span class="line">  &#125;));</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> c <span class="keyword">in</span> o) &#123;</span><br><span class="line">    <span class="keyword">var</span> l = o[c] || <span class="number">0</span> === o[c] ? <span class="string">&#x27;object&#x27;</span> === a(o[c]) ? <span class="built_in">JSON</span>.stringify(o[c]) : o[c] : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="number">0</span> === l || l ? r += <span class="string">&#x27;&#x27;</span>.concat(c, <span class="string">&#x27;=&#x27;</span>).concat(l, <span class="string">&#x27;&amp;&#x27;</span>) : <span class="keyword">delete</span> n[c]</span><br><span class="line">  &#125;</span><br><span class="line">  r += <span class="string">&#x27;key=&#x27;</span>.concat(u);</span><br><span class="line">  <span class="keyword">var</span> f = i.a.HmacSHA256(r, u);</span><br><span class="line">  <span class="keyword">return</span> i.a.enc.Hex.stringify(f).toUpperCase()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在可以确认加密编码方式为 <strong>Hmac-SHA256</strong> </p><p>有部分看不懂部的代码，打印一下输出。</p><p><strong>i.a.enc</strong></p><p><img src="https://github.com/i01ortal/Images/tree/main/imgback/202209061418868.png" alt="image-20220905152050050"></p><p>现在知道是什么意思了，代表调用的加密方法，其它情况也可以这样去判断，对不了解的函数直接谷歌查找一下就OK。</p><h4 id="继续跟进-funtion-p-1"><a href="#继续跟进-funtion-p-1" class="headerlink" title="继续跟进 funtion p"></a>继续跟进 <strong>funtion p</strong></h4><p><img src="https://github.com/i01ortal/Images/tree/main/imgback/202209061432727.png" alt="image-20220905154758475"></p><h4 id="跟进函数-d-1"><a href="#跟进函数-d-1" class="headerlink" title="跟进函数 d()"></a>跟进函数 <strong>d()</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="built_in">Object</span>.keys(e).sort(), n = &#123;</span><br><span class="line">      &#125;, r = <span class="number">0</span>; r &lt; t.length; r++) n[t[r]] = e[t[r]];</span><br><span class="line">      <span class="keyword">return</span> n</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong><code>Object.keys()</code></strong> 方法会返回一个由一个给定对象的自身可枚举属性组成的数组，数组中属性名的排列顺序和正常循环遍历该对象时返回的顺序一致。</p></blockquote><blockquote><p>默认情况下，<code>sort()</code> 方法将按字母和升序将值作为字符串进行排序。</p></blockquote><p>对 e 进行了排序处理，按照数组首字母进行升序排序。</p><h4 id="继续跟进-s-1"><a href="#继续跟进-s-1" class="headerlink" title="继续跟进 s"></a>继续跟进 <strong>s</strong></h4><p><img src="https://github.com/i01ortal/Images/tree/main/imgback/202209061419460.png" alt="image-20220905160039509"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="number">1</span>; t &lt; <span class="built_in">arguments</span>.length; t++) &#123;</span><br><span class="line">    <span class="keyword">var</span> n = <span class="literal">null</span> != <span class="built_in">arguments</span>[t] ? <span class="built_in">arguments</span>[t] : &#123;</span><br><span class="line">    &#125;;</span><br><span class="line">    t % <span class="number">2</span> ? o(<span class="built_in">Object</span>(n), !<span class="number">0</span>).forEach((<span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">      c(e, t, n[t])</span><br><span class="line">    &#125;)) : <span class="built_in">Object</span>.getOwnPropertyDescriptors ? <span class="built_in">Object</span>.defineProperties(e, <span class="built_in">Object</span>.getOwnPropertyDescriptors(n)) : o(<span class="built_in">Object</span>(n)).forEach((<span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">Object</span>.defineProperty(e, t, <span class="built_in">Object</span>.getOwnPropertyDescriptor(n, t))</span><br><span class="line">    &#125;))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> e</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>**<code>forEach() </code>**方法用于调用数组的每个元素，并将元素传递给回调函数。注意:forEach() 对于空数组是不会执行回调函数的。</p></blockquote><blockquote><p><strong><code>Object.getOwnPropertyDescriptors()</code></strong> 方法用来获取一个对象的所有自身属性的描述符。</p></blockquote><p>还是不太能看懂要干什么，继续跟进看输出</p><p><img src="https://github.com/i01ortal/Images/tree/main/imgback/202209061419484.png" alt="image-20220905161207683"></p><p>虽然具体不理解 <strong>s()</strong> 要干什么，但是知道 **s()**是什么也行。大致对 <strong>e</strong> 进行处理，可以看到 <strong>e</strong> 是 参数 Customized-Field 。</p><p><img src="https://github.com/i01ortal/Images/tree/main/imgback/202209061419880.png" alt="image-20220905162148287"></p><p>那么 <strong>o = d(s({}, n, {‘Customized-Field’: e}))</strong> ，就是进行了数组排序处理。</p><h4 id="继续更进：-1"><a href="#继续更进：-1" class="headerlink" title="继续更进："></a>继续更进：</h4><p><img src="https://github.com/i01ortal/Images/tree/main/imgback/202209061419134.png" alt="image-20220905163357004"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> c <span class="keyword">in</span> o) &#123;</span><br><span class="line">  <span class="keyword">var</span> l = o[c] || <span class="number">0</span> === o[c] ? <span class="string">&#x27;object&#x27;</span> === a(o[c]) ? <span class="built_in">JSON</span>.stringify(o[c]) : o[c] : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="number">0</span> === l || l ? r += <span class="string">&#x27;&#x27;</span>.concat(c, <span class="string">&#x27;=&#x27;</span>).concat(l, <span class="string">&#x27;&amp;&#x27;</span>) : <span class="keyword">delete</span> n[c]</span><br><span class="line">&#125;</span><br><span class="line">r += <span class="string">&#x27;key=&#x27;</span>.concat(u);</span><br></pre></td></tr></table></figure><blockquote><p>PS-3: 以上调试时未在请求中post数据</p></blockquote><p>再请求中带上POST数据后</p><p><img src="https://github.com/i01ortal/Images/tree/main/imgback/202209061419988.png" alt="image-20220905165046078"></p><p>对排序过后的 <strong>o</strong> 进行重组，重组格式大致如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;Customized-Field=&#123;\&quot;api\&quot;:\&quot;/user/institutionListByAccount\&quot;,\&quot;client-type\&quot;:\&quot;web\&quot;,\&quot;timestamp\&quot;:\&quot;1662367339537\&quot;&#125;&amp;account=admin&amp;key=JQGyyyXXXXXCA9WPEx72jXXXXXXUNpEK1FL6B&quot;</span> </span><br></pre></td></tr></table></figure><p><strong>Customized-Field + = + {排序后api, client-type, timestamp} + &amp; 参数（字母顺序升序排序）+ &amp; + 参数值 + &amp; + key值（不参与排序）</strong></p><h4 id="继续跟进，Sign值生成-1"><a href="#继续跟进，Sign值生成-1" class="headerlink" title="继续跟进，Sign值生成"></a>继续跟进，Sign值生成</h4><p><img src="https://github.com/i01ortal/Images/tree/main/imgback/202209061419773.png" alt="image-20220905165601894"></p><p>到这不用关注加密是怎么执行，步出得到结果就行，控制台执行 <strong>i.a.enc.Hex.stringify(f).toUpperCase()</strong></p><p><img src="https://github.com/i01ortal/Images/tree/main/imgback/202209061420545.png" alt="image-20220905170329384"></p><p>好了，现在已经得到Sign值的加密以及生成方法了。整个流程大致如下：</p><p><img src="https://github.com/i01ortal/Images/tree/main/imgback/202209061420758.png" alt="image-20220905172658183"></p><p>整个分析过程也比较简单，第一步便找到入口点，那后面的只需要时间就能解决了。下面使用python来实现一下加密代码：</p><h3 id="Python代码实现：-1"><a href="#Python代码实现：-1" class="headerlink" title="Python代码实现："></a>Python代码实现：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> operator</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">timestamp = <span class="built_in">str</span>(time.time()*<span class="number">1000</span>)[<span class="number">0</span>:-<span class="number">4</span>][<span class="number">0</span>:-<span class="number">1</span>] <span class="comment"># 返回当前时间的时间戳（1970纪元后经过的浮点秒数）。</span></span><br><span class="line">key = <span class="string">&quot;JQGyyy1dP2ku1XXXXXXXXX2S3UIf1n0uUNpEK1FL6B&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    url = <span class="string">r&#x27;/file/download?fileName=&amp;type=1&#x27;</span> <span class="comment"># GET 参数</span></span><br><span class="line">    data = <span class="string">&quot;&quot;&quot;&#123;&quot;taskId&quot;:2,&quot;pageNum&quot;:1,&quot;pageSize&quot;:10&#125;&quot;&quot;&quot;</span> <span class="comment"># POST参数</span></span><br><span class="line">    datan = <span class="built_in">dict</span>(<span class="built_in">sorted</span>(json.loads(data).items(), key=operator.itemgetter(<span class="number">0</span>))) <span class="comment"># POST参数str型使用json处理，按照首字母顺序进行重排列</span></span><br><span class="line">    post_datam = <span class="built_in">str</span>(datan).replace(<span class="string">&#x27;&quot;&#x27;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&#x27;:&#x27;</span>,<span class="string">&#x27;=&#x27;</span>).replace(<span class="string">&quot;,&quot;</span>,<span class="string">&quot;&amp;&quot;</span>).replace(<span class="string">&quot;&#123;&quot;</span>,<span class="string">&quot;&amp;&quot;</span>).replace(<span class="string">&quot;&#125;&quot;</span>,<span class="string">&quot;&amp;&quot;</span>).replace(<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    get_params = <span class="string">&quot;&amp;&quot;</span> + url.split(<span class="string">&quot;?&quot;</span>)[<span class="number">1</span>] + <span class="string">&quot;&amp;&quot;</span></span><br><span class="line">    signdata = <span class="string">&#x27;Customized-Field=&#123;&#x27;</span> + <span class="string">&#x27;&quot;api&quot;:&quot;&#123;&#125;&quot;,&quot;client-type&quot;:&quot;web&quot;&#x27;</span>.<span class="built_in">format</span>(url) + <span class="string">&quot;,&quot;</span> + <span class="string">&#x27;&quot;timestamp&quot;:&quot;&#123;&#125;&quot;&#x27;</span>.<span class="built_in">format</span>(timestamp) + <span class="string">&quot;&#125;&quot;</span> + <span class="string">&#x27;&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(params) + <span class="string">&quot;key=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(key)</span><br><span class="line">    sign = hmac.new(<span class="built_in">bytes</span>(key, encoding=<span class="string">&#x27;UTF-8&#x27;</span>), <span class="built_in">bytes</span>(signdata, encoding=<span class="string">&#x27;UTF-8&#x27;</span>), digestmod=sha256).hexdigest() <span class="comment"># hmac-sha256加密</span></span><br><span class="line">    <span class="built_in">print</span>(timestamp)</span><br><span class="line">    <span class="comment"># print(signdata)</span></span><br><span class="line">    <span class="built_in">print</span>(sign.upper())</span><br></pre></td></tr></table></figure><p><img src="https://github.com/i01ortal/Images/tree/main/imgback/202209061420682.png" alt="image-20220905173351783"></p><blockquote><p>PS-4: 代码写的跟屎一样，各位师傅勿视。</p></blockquote><p>目前第一版代码如上，后续会配合@f0ng师傅写的 项目<strong>autoDecoder</strong> 结合在BurpSuite中实现自动更新Sign值和Customized-Field。</p><p>项目地址：<a href="https://github.com/f0ng/autoDecoder">https://github.com/f0ng/autoDecoder</a></p><p>参考：</p><p><a href="https://juejin.cn/post/7037704683468619807">https://juejin.cn/post/7037704683468619807</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;某站点SIgn值逆向&quot;&gt;&lt;a href=&quot;#某站点SIgn值逆向&quot; class=&quot;headerlink&quot; title=&quot;某站点SIgn值逆向&quot;&gt;&lt;/a&gt;某站点SIgn值逆向&lt;/h1&gt;&lt;p&gt;Autor：I01ORTAL&lt;/p&gt;
&lt;p&gt;Time：2022-09-05&lt;/p&gt;
&lt;p&gt;随着网络安全的发展，如何保护API接口的数据安全性成了一个很重要的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;某站点SIgn值逆向&lt;/p&gt;
&lt;p&gt;Autor：I01ORTAL&lt;/p&gt;
&lt;p&gt;Time：2022-09-05&lt;/p&gt;
&lt;p&gt;随着网络安全的发展，如何保护API接口的数据安全性成了一个很重要的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;请求身份来源是否合法？&lt;/li&gt;
&lt;li&gt;请求参数是否被篡改？&lt;/li&gt;
&lt;li&gt;请求的唯一性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;面临以上一些问题，Sign（签名）也被设计出来保护API接口数据的安全。更多应用厂商也开始意识到，很多应用系统已经开始采用验证签名的方法来保护，防止一些攻击，如 Replay attack （重放攻击），Data tampering（数据篡改）。&lt;/p&gt;
&lt;p&gt;但是加上Sign并不是说其它漏洞或者安全问题就不存在，还是需要我们进行渗透测试，验证系统是否安全，有防自然有攻，还是那句话，没有绝对安全的系统。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</summary>
    
    
    
    <category term="js逆向" scheme="http://i01ortal.tk/categories/js%E9%80%86%E5%90%91/"/>
    
    
    <category term="javascript" scheme="http://i01ortal.tk/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>博客搭建</title>
    <link href="http://i01ortal.tk/2021/07/21/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <id>http://i01ortal.tk/2021/07/21/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</id>
    <published>2021-07-21T01:52:28.000Z</published>
    <updated>2022-09-06T06:32:43.176Z</updated>
    
    <content type="html"><![CDATA[<h1 id="博客搭建"><a href="#博客搭建" class="headerlink" title="博客搭建"></a>博客搭建</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="安装-node-js-和-Git"><a href="#安装-node-js-和-Git" class="headerlink" title="安装 node.js 和 Git"></a>安装 node.js 和 Git</h3><p>Hexo 基于 Node.js，搭建过程中还需要使用 npm（Node.js 已带） 和 git，因此先搭建本地操作环境，安装 Node.js 和 Git。</p><p>Node.js: <a href="https://nodejs.org/">https://nodejs.org/</a></p><p>Git: <a href="https://git-scm.com/">https://git-scm.com/</a></p><span id="more"></span><p>下载安装基本默认，点击下一步直到安装完成。</p><p>验证是否安装完成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node -v </span><br><span class="line">npm -v </span><br><span class="line">git --version</span><br></pre></td></tr></table></figure><h3 id="配置Github"><a href="#配置Github" class="headerlink" title="配置Github"></a>配置Github</h3><p>打开 Git Bash,  设置 git 代理：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">设置代理：</span><br><span class="line">git config --global http.proxy &#x27;http://127.0.0.1:1080&#x27; </span><br><span class="line">git config --global https.proxy &#x27;https://127.0.0.1:1080&#x27;</span><br><span class="line"></span><br><span class="line">查看代理：</span><br><span class="line">git config --global --get http.proxy</span><br><span class="line">git config --global --get https.proxy</span><br><span class="line"></span><br><span class="line">取消代理：</span><br><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>设置用户名和邮箱</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;Name&quot;</span><br><span class="line">git config --global user.email &quot;Email&quot;</span><br></pre></td></tr></table></figure><p>创建SSH密钥：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;Name&quot;</span><br></pre></td></tr></table></figure><p>查看密钥：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat C:/User/用户名/.ssh id_rsa.pub</span><br></pre></td></tr></table></figure><p>登录 Github 进入 Settings 页面，选择 SSH and GPG keys ，点击 New SSH key。Title 随便取个名字，粘贴复制的 id_rsa.pub 内容到 Key 中，点击 Add SSH key 完成添加</p><p><img src="/2021/07/21/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20210715090449869.png" alt="image-20210715090449869"></p><p>验证连接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>出现 You’ve successfully authenticated…. 即连接成功</p><p>创建 Github Pages 仓库：</p><p>GitHub 主页右上角加号 -&gt; New repository，Repository name 中输入  name.github.io , 选择Add a README file , 填好后点击 Create repository 创建。</p><p><img src="/2021/07/21/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20210715091651156.png" alt="image-20210715091651156"></p><p>创建后默认自动启用 HTTPS，博客地址为<code>https://i01ortal.github.io</code></p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>创建一个空文件夹来存在 Hexo 的文件，在该处打开 Git bash。</p><p>设置 npm 源:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>安装 hexo :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>Hexo 初始化和安装组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init      # 初始化npm install    # 安装组件</span><br></pre></td></tr></table></figure><p>完成后启动本地服务器预览：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g   # 生成页面hexo s   # 启动预览</span><br></pre></td></tr></table></figure><p>访问 <a href="http://localhost:4000，">http://localhost:4000，</a> 出现 Hexo 默认页面</p><p>Hexo 目录结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">|-- _config.yml//网站的全局配置文件</span><br><span class="line">|-- node_modules//nodejs库文件</span><br><span class="line">|-- scaffolds//模板文件</span><br><span class="line">|-- source//文章保存文件夹</span><br><span class="line">   |-- _posts//文章保存目录</span><br><span class="line">|-- public//编译后indexd等存放</span><br><span class="line">|-- themes//主题</span><br><span class="line">|-- .gitignore//声明不被 git 记录</span><br><span class="line">|-- db.json//source目录下数据</span><br><span class="line">|-- package.json//框架的基本参数信息</span><br><span class="line">|-- package-lock.json//上面备份</span><br></pre></td></tr></table></figure><h2 id="Next-主题配置"><a href="#Next-主题配置" class="headerlink" title="Next 主题配置"></a>Next 主题配置</h2><p>安装 Next :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd your-hexo-sitegit clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>打开站点配置文件 <code>_config.yml</code> ，找到 <code>theme</code> 字段，并将其值更改为 <code>next</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: next</span><br></pre></td></tr></table></figure><p>验证主题：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s --debug</span><br></pre></td></tr></table></figure><p>访问报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends ‘_layout.swig‘ %&#125; &#123;% import ‘_macro/post.swig‘ as post_template %&#125;.....</span><br></pre></td></tr></table></figure><p>hexo在5.0之后把 swig 给删除了需要自己手动安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-renderer-swig</span><br></pre></td></tr></table></figure><p>无其他错误后本地访问：</p><p><img src="/2021/07/21/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20210715094704582.png" alt="image-20210715094704582"></p><h2 id="上传Github"><a href="#上传Github" class="headerlink" title="上传Github"></a>上传Github</h2><p>freenom 域名注册：</p><p>freenom 能免费注册域名，且可以匿名注册，<a href="https://freenom.com/">https://freenom.com</a> .</p><p><img src="/2021/07/21/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20210722085650816.png" alt="image-20210722085650816"></p><p>设置 dns 指向 github :</p><p><img src="/2021/07/21/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20210722100231015.png" alt="image-20210722100231015"></p><p><img src="/2021/07/21/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20210722100321663.png" alt="image-20210722100321663"></p><p>在 source 目录下新建 CNAME 文件：</p><p><img src="/2021/07/21/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20210722101117861.png" alt="image-20210722101117861"></p><p>更改网站配置处 deploy :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/i01ortal-Blog</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>安装 hexo-deploy-git 插件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deploy-git --save</span><br></pre></td></tr></table></figure><p>hexo 上传 github :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;文章&quot;</span><br><span class="line">hexo clean </span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p><img src="/2021/07/21/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20210722193559202.png" alt="image-20210722193559202"></p><p>到此博客搭建完成。</p><h2 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h2><p>写文章需要插入图片时，安装 hexo-asset-image :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure><p>该插件存在问题需修改下 hexo-asset-image 目录下 index.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&#x27;use strict&#x27;;</span><br><span class="line">var cheerio = require(&#x27;cheerio&#x27;);</span><br><span class="line"></span><br><span class="line">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span><br><span class="line">function getPosition(str, m, i) &#123;</span><br><span class="line">  return str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var version = String(hexo.version).split(&#x27;.&#x27;);</span><br><span class="line">hexo.extend.filter.register(&#x27;after_post_render&#x27;, function(data)&#123;</span><br><span class="line">  var config = hexo.config;</span><br><span class="line">  if(config.post_asset_folder)&#123;</span><br><span class="line">    var link = data.permalink;</span><br><span class="line">if(version.length &gt; 0 &amp;&amp; Number(version[0]) == 3)</span><br><span class="line">   var beginPos = getPosition(link, &#x27;/&#x27;, 1) + 1;</span><br><span class="line">else</span><br><span class="line">   var beginPos = getPosition(link, &#x27;/&#x27;, 3) + 1;</span><br><span class="line">// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.</span><br><span class="line">var endPos = link.lastIndexOf(&#x27;/&#x27;) + 1;</span><br><span class="line">    link = link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    var toprocess = [&#x27;excerpt&#x27;, &#x27;more&#x27;, &#x27;content&#x27;];</span><br><span class="line">    for(var i = 0; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">      var key = toprocess[i];</span><br><span class="line"> </span><br><span class="line">      var $ = cheerio.load(data[key], &#123;</span><br><span class="line">        ignoreWhitespace: false,</span><br><span class="line">        xmlMode: false,</span><br><span class="line">        lowerCaseTags: false,</span><br><span class="line">        decodeEntities: false</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(&#x27;img&#x27;).each(function()&#123;</span><br><span class="line">if ($(this).attr(&#x27;src&#x27;))&#123;</span><br><span class="line">// For windows style path, we replace &#x27;\&#x27; to &#x27;/&#x27;.</span><br><span class="line">var src = $(this).attr(&#x27;src&#x27;).replace(&#x27;\\&#x27;, &#x27;/&#x27;);</span><br><span class="line">if(!/http[s]*.*|\/\/.*/.test(src) &amp;&amp;</span><br><span class="line">   !/^\s*\//.test(src)) &#123;</span><br><span class="line">  // For &quot;about&quot; page, the first part of &quot;src&quot; can&#x27;t be removed.</span><br><span class="line">  // In addition, to support multi-level local directory.</span><br><span class="line">  var linkArray = link.split(&#x27;/&#x27;).filter(function(elem)&#123;</span><br><span class="line">return elem != &#x27;&#x27;;</span><br><span class="line">  &#125;);</span><br><span class="line">  var srcArray = src.split(&#x27;/&#x27;).filter(function(elem)&#123;</span><br><span class="line">return elem != &#x27;&#x27; &amp;&amp; elem != &#x27;.&#x27;;</span><br><span class="line">  &#125;);</span><br><span class="line">  if(srcArray.length &gt; 1)</span><br><span class="line">srcArray.shift();</span><br><span class="line">  src = srcArray.join(&#x27;/&#x27;);</span><br><span class="line">  $(this).attr(&#x27;src&#x27;, config.root + link + src);</span><br><span class="line">  console.info&amp;&amp;console.info(&quot;update link as:--&gt;&quot;+config.root + link + src);</span><br><span class="line">&#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">console.info&amp;&amp;console.info(&quot;no src attr, skipped...&quot;);</span><br><span class="line">console.info&amp;&amp;console.info($(this));</span><br><span class="line">&#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] = $.html();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>markdown 编辑器 ：</p><p>推荐使用 Typora 来进行文章编写，下载地址：</p><p><a href="https://typora.io/">https://typora.io/</a></p><p>文章折叠：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">This is a page.</span><br><span class="line">.....</span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line">.....</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>每次发布文章则需要执行下面命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>文章目录设置：</p><p>在 custom.styl 文件中添加 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//文章目录默认展开</span><br><span class="line">.post-toc .nav .nav-child &#123; display: block; &#125;</span><br><span class="line">.post-toc ol &#123;  </span><br><span class="line">  font-size : 13px;     </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>点击中文目录无法跳转：</p><p>修改 js/src/post-details.js 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 第75行下添加</span><br><span class="line">targetSelector = decodeURI(this.getAttribute(&#x27;href&#x27;)) //对获取到url重编码</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;博客搭建&quot;&gt;&lt;a href=&quot;#博客搭建&quot; class=&quot;headerlink&quot; title=&quot;博客搭建&quot;&gt;&lt;/a&gt;博客搭建&lt;/h1&gt;&lt;h2 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭建&lt;/h2&gt;&lt;h3 id=&quot;安装-node-js-和-Git&quot;&gt;&lt;a href=&quot;#安装-node-js-和-Git&quot; class=&quot;headerlink&quot; title=&quot;安装 node.js 和 Git&quot;&gt;&lt;/a&gt;安装 node.js 和 Git&lt;/h3&gt;&lt;p&gt;Hexo 基于 Node.js，搭建过程中还需要使用 npm（Node.js 已带） 和 git，因此先搭建本地操作环境，安装 Node.js 和 Git。&lt;/p&gt;
&lt;p&gt;Node.js: &lt;a href=&quot;https://nodejs.org/&quot;&gt;https://nodejs.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Git: &lt;a href=&quot;https://git-scm.com/&quot;&gt;https://git-scm.com/&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="blog" scheme="http://i01ortal.tk/categories/blog/"/>
    
    
    <category term="blog" scheme="http://i01ortal.tk/tags/blog/"/>
    
  </entry>
  
</feed>
